# QAInsight Documentation
Version: 1.0.0

## Overview
QAInsight is an AI-powered code analysis and improvement platform built with .NET 8. It provides intelligent code analysis, refactoring suggestions, test generation, and documentation capabilities through a modern web interface and API.

## Architecture

### Project Structure
```
QAInsight/
├── QAInsight.Domain/           # Core domain models and interfaces
├── QAInsight.Application/      # Application logic and services
├── QAInsight.Infrastructure/   # External concerns implementation
├── QAInsight.Web/             # Web API and Blazor UI
├── QAInsight.Plugins.Sample/   # Sample plugin implementation
└── Tests/
    ├── QAInsight.Tests.Unit/
    ├── QAInsight.Tests.Integration/
    └── QAInsight.Web.Tests/
```

### Key Components

1. Domain Layer (QAInsight.Domain)
   - Core entities (CodeBase, CodeIssue, RefactorSuggestion, etc.)
   - Interface definitions (IAIClient, ICodeAnalyzer, etc.)
   - Value objects and enums
   - Plugin interfaces

2. Application Layer (QAInsight.Application)
   - AssistantService for AI interactions
   - Command/Query handlers
   - Workflow management
   - Validation and error handling

3. Infrastructure Layer (QAInsight.Infrastructure)
   - AI client implementations
   - Code analysis tools
   - Repository implementations
   - External service integrations

4. Web Layer (QAInsight.Web)
   - REST API endpoints
   - Blazor Server UI
   - Authentication middleware
   - Configuration management

## API Endpoints

### Assistant API
```
POST /api/assistant/ask
{
    "filePath": "string",
    "code": "string",
    "question": "string",
    "lineRange": "string",
    "focus": "string",
    "includeSuggestions": boolean
}

POST /api/assistant/improve-prompt
{
    "originalPrompt": "string",
    "aiResponse": "string"
}
```

### Code Analysis API
```
POST /api/codeanalysis/analyze
{
    "source": "string",
    "repositoryUrl": "string",
    "branch": "string",
    "language": "enum",
    "includeTests": boolean,
    "includeDocumentation": boolean,
    "includeRefactorSuggestions": boolean
}
```

### Other APIs
- Refactoring API (/api/refactor)
- Documentation API (/api/docs)
- Test Generation API (/api/tests)
- Repository Management API (/api/repo)

## Swagger/OpenAPI Documentation

### Accessing Swagger UI
- Navigate to https://localhost:5001/swagger
- Interactive documentation and testing interface
- API key authentication required for testing endpoints

### Available Endpoints

#### Assistant API
```yaml
/api/assistant/ask:
  post:
    tags:
      - Assistant
    summary: Ask a question about code
    security:
      - ApiKey: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              filePath:
                type: string
                description: Path to the file being analyzed
              code:
                type: string
                description: Source code content
              question:
                type: string
                description: The question about the code
              lineRange:
                type: string
                description: Optional line range to focus on
              focus:
                type: string
                description: Optional analysis focus area
              includeSuggestions:
                type: boolean
                description: Whether to include refactoring suggestions
    responses:
      '200':
        description: Successful response
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantResponse'
      '401':
        description: Unauthorized - Invalid API key
      '500':
        description: Internal server error

/api/assistant/improve-prompt:
  post:
    tags:
      - Assistant
    summary: Improve an existing prompt
    security:
      - ApiKey: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              originalPrompt:
                type: string
                description: Original prompt text
              aiResponse:
                type: string
                description: AI response to improve
    responses:
      '200':
        description: Improved prompt
        content:
          application/json:
            schema:
              type: string
```

#### Code Analysis API
```yaml
/api/codeanalysis/analyze:
  post:
    tags:
      - Code Analysis
    summary: Analyze code for issues and improvements
    security:
      - ApiKey: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              source:
                type: string
                description: Source code or directory path
              repositoryUrl:
                type: string
                description: Optional Git repository URL
              branch:
                type: string
                description: Git branch name (default: main)
              language:
                type: string
                enum: [CSharp, VisualBasic, FSharp, TypeScript, JavaScript, Python, Java, Cpp, Go, Rust]
              includeTests:
                type: boolean
              includeDocumentation:
                type: boolean
              includeRefactorSuggestions:
                type: boolean
    responses:
      '200':
        description: Analysis results
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisResponse'
```

### Common Models

```yaml
components:
  schemas:
    CodeIssue:
      type: object
      properties:
        id:
          type: string
          format: uuid
        filePath:
          type: string
        startLine:
          type: integer
        endLine:
          type: integer
        severity:
          type: string
          enum: [Info, Warning, Error, Critical]
        description:
          type: string
        codeSnippet:
          type: string

    RefactorSuggestion:
      type: object
      properties:
        description:
          type: string
        codeExample:
          type: string
        explanation:
          type: string
        impact:
          type: string
        effort:
          type: string

    AssistantResponse:
      type: object
      properties:
        answer:
          type: string
        context:
          $ref: '#/components/schemas/CodeContext'
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/CodeSuggestion'

    CodeContext:
      type: object
      properties:
        filePath:
          type: string
        lineRange:
          type: string
        code:
          type: string
        issues:
          type: array
          items:
            $ref: '#/components/schemas/CodeIssue'
        metrics:
          type: object
          additionalProperties: true
```

### Security

```yaml
components:
  securitySchemes:
    ApiKey:
      type: apiKey
      name: X-API-Key
      in: header
      description: API key for authentication
```

### Using Swagger UI

1. Authentication:
   - Click the "Authorize" button at the top
   - Enter your API key
   - All subsequent requests will include the key

2. Testing Endpoints:
   - Expand the desired endpoint
   - Click "Try it out"
   - Fill in the request parameters
   - Click "Execute"
   - View the response

3. Model Schemas:
   - Scroll to the bottom for detailed model definitions
   - Use as reference for request/response structures
   - Click model links in endpoints for quick reference

4. Environment Selection:
   - Use the server dropdown to switch environments
   - Available environments: Development, Staging, Production
   - Each environment has its own base URL

5. Export:
   - Download OpenAPI specification
   - Generate client code
   - Export as curl commands

## API Examples

### Assistant API Examples

#### 1. Ask a Question About Code
```bash
# Using curl
curl -X POST https://localhost:5001/api/assistant/ask \
  -H "X-API-Key: your-api-key" \
  -H "Content-Type: application/json" \
  -d '{
    "filePath": "src/MyProject/Program.cs",
    "code": "public class Calculator { public int Add(int a, int b) { return a + b; } }",
    "question": "How can I improve the error handling in this Add method?",
    "lineRange": "1-3",
    "focus": "error-handling",
    "includeSuggestions": true
  }'

# Using PowerShell
$body = @{
    filePath = "src/MyProject/Program.cs"
    code = "public class Calculator { public int Add(int a, int b) { return a + b; } }"
    question = "How can I improve the error handling in this Add method?"
    lineRange = "1-3"
    focus = "error-handling"
    includeSuggestions = $true
} | ConvertTo-Json

Invoke-RestMethod -Uri "https://localhost:5001/api/assistant/ask" `
    -Method Post `
    -Headers @{ "X-API-Key" = "your-api-key" } `
    -ContentType "application/json" `
    -Body $body

# Example Response
{
    "answer": "To improve error handling in the Add method, you could: 1) Add input validation for overflow cases, 2) Consider using checked arithmetic, 3) Document the behavior for edge cases. Here's an improved version...",
    "context": {
        "filePath": "src/MyProject/Program.cs",
        "lineRange": "1-3",
        "code": "public class Calculator...",
        "issues": [
            {
                "severity": "Warning",
                "description": "No overflow checking in arithmetic operation"
            }
        ],
        "metrics": {
            "cyclomaticComplexity": 1,
            "maintainabilityIndex": 85
        }
    },
    "suggestions": [
        {
            "issueType": "ErrorHandling",
            "severity": "Warning",
            "description": "Add overflow checking",
            "codeExample": "public int Add(int a, int b) { return checked(a + b); }",
            "lineNumber": 2
        }
    ]
}
```

#### 2. Improve a Prompt
```bash
# Using curl
curl -X POST https://localhost:5001/api/assistant/improve-prompt \
  -H "X-API-Key: your-api-key" \
  -H "Content-Type: application/json" \
  -d '{
    "originalPrompt": "How to make this code better?",
    "aiResponse": "The code could be improved by adding error handling and documentation."
  }'

# Using PowerShell
$body = @{
    originalPrompt = "How to make this code better?"
    aiResponse = "The code could be improved by adding error handling and documentation."
} | ConvertTo-Json

Invoke-RestMethod -Uri "https://localhost:5001/api/assistant/improve-prompt" `
    -Method Post `
    -Headers @{ "X-API-Key" = "your-api-key" } `
    -ContentType "application/json" `
    -Body $body

# Example Response
{
    "improvedPrompt": "What specific improvements could be made to this code in terms of error handling, input validation, and documentation to enhance its reliability and maintainability?"
}
```

### Code Analysis API Examples

#### 1. Analyze Code from Source
```bash
# Using curl
curl -X POST https://localhost:5001/api/codeanalysis/analyze \
  -H "X-API-Key: your-api-key" \
  -H "Content-Type: application/json" \
  -d '{
    "source": "public class User { public string Name; }",
    "language": "CSharp",
    "includeTests": true,
    "includeDocumentation": true,
    "includeRefactorSuggestions": true
  }'

# Using PowerShell
$body = @{
    source = "public class User { public string Name; }"
    language = "CSharp"
    includeTests = $true
    includeDocumentation = $true
    includeRefactorSuggestions = $true
} | ConvertTo-Json

Invoke-RestMethod -Uri "https://localhost:5001/api/codeanalysis/analyze" `
    -Method Post `
    -Headers @{ "X-API-Key" = "your-api-key" } `
    -ContentType "application/json" `
    -Body $body

# Example Response
{
    "issues": [
        {
            "severity": "Warning",
            "description": "Consider making the field private and adding a property",
            "filePath": "input",
            "startLine": 1,
            "endLine": 1
        }
    ],
    "suggestions": [
        {
            "description": "Encapsulate field with property",
            "codeExample": "public class User { private string _name; public string Name { get; set; } }"
        }
    ],
    "documentation": {
        "summary": "Represents a user in the system",
        "remarks": "This class should be enhanced with proper encapsulation"
    },
    "tests": [
        {
            "name": "User_Name_ShouldSetAndGetCorrectly",
            "code": "public void User_Name_ShouldSetAndGetCorrectly() { ... }"
        }
    ]
}
```

#### 2. Analyze Repository
```bash
# Using curl
curl -X POST https://localhost:5001/api/codeanalysis/analyze \
  -H "X-API-Key: your-api-key" \
  -H "Content-Type: application/json" \
  -d '{
    "repositoryUrl": "https://github.com/username/repo",
    "branch": "main",
    "language": "CSharp",
    "includeTests": true
  }'

# Using PowerShell
$body = @{
    repositoryUrl = "https://github.com/username/repo"
    branch = "main"
    language = "CSharp"
    includeTests = $true
} | ConvertTo-Json

Invoke-RestMethod -Uri "https://localhost:5001/api/codeanalysis/analyze" `
    -Method Post `
    -Headers @{ "X-API-Key" = "your-api-key" } `
    -ContentType "application/json" `
    -Body $body

# Example Response
{
    "repositoryInfo": {
        "name": "repo",
        "branch": "main",
        "commitHash": "abc123",
        "fileCount": 42
    },
    "analysis": {
        "issueCount": 15,
        "criticalIssues": 2,
        "warnings": 10,
        "suggestions": 3
    },
    "metrics": {
        "totalLines": 5000,
        "testCoverage": 75.5,
        "duplicateCode": 3.2
    }
}
```

### Refactoring API Examples

#### 1. Get Refactoring Suggestions
```bash
# Using curl
curl -X POST https://localhost:5001/api/refactor \
  -H "X-API-Key: your-api-key" \
  -H "Content-Type: application/json" \
  -d '{
    "code": "public void ProcessData(string data) { if(data != null) { /* process */ } }",
    "context": "This method processes user input data"
  }'

# Using PowerShell
$body = @{
    code = "public void ProcessData(string data) { if(data != null) { /* process */ } }"
    context = "This method processes user input data"
} | ConvertTo-Json

Invoke-RestMethod -Uri "https://localhost:5001/api/refactor" `
    -Method Post `
    -Headers @{ "X-API-Key" = "your-api-key" } `
    -ContentType "application/json" `
    -Body $body

# Example Response
{
    "suggestions": [
        {
            "description": "Use null pattern or guard clause",
            "codeExample": "public void ProcessData(string data)\n{\n    if (data == null) throw new ArgumentNullException(nameof(data));\n    /* process */\n}",
            "impact": "Improved error handling and code clarity",
            "effort": "Low"
        }
    ]
}
```

### Documentation API Examples

#### 1. Generate Documentation
```bash
# Using curl
curl -X POST https://localhost:5001/api/docs/generate \
  -H "X-API-Key: your-api-key" \
  -H "Content-Type: application/json" \
  -d '{
    "code": "public class OrderProcessor { public void ProcessOrder(Order order) { } }",
    "language": "CSharp",
    "format": "xml",
    "includeExamples": true
  }'

# Using PowerShell
$body = @{
    code = "public class OrderProcessor { public void ProcessOrder(Order order) { } }"
    language = "CSharp"
    format = "xml"
    includeExamples = $true
} | ConvertTo-Json

Invoke-RestMethod -Uri "https://localhost:5001/api/docs/generate" `
    -Method Post `
    -Headers @{ "X-API-Key" = "your-api-key" } `
    -ContentType "application/json" `
    -Body $body

# Example Response
{
    "documentation": "/// <summary>\n/// Processes orders in the system\n/// </summary>\n/// <remarks>\n/// Use this class to handle all order processing operations\n/// </remarks>",
    "examples": [
        {
            "title": "Basic Usage",
            "code": "var processor = new OrderProcessor();\nvar order = new Order();\nprocessor.ProcessOrder(order);"
        }
    ]
}
```

### Test Generation API Examples

#### 1. Generate Test Cases
```bash
# Using curl
curl -X POST https://localhost:5001/api/tests/generate \
  -H "X-API-Key: your-api-key" \
  -H "Content-Type: application/json" \
  -d '{
    "code": "public class Calculator { public int Divide(int a, int b) { return a / b; } }",
    "language": "CSharp",
    "framework": "xUnit",
    "includeMocks": true
  }'

# Using PowerShell
$body = @{
    code = "public class Calculator { public int Divide(int a, int b) { return a / b; } }"
    language = "CSharp"
    framework = "xUnit"
    includeMocks = $true
} | ConvertTo-Json

Invoke-RestMethod -Uri "https://localhost:5001/api/tests/generate" `
    -Method Post `
    -Headers @{ "X-API-Key" = "your-api-key" } `
    -ContentType "application/json" `
    -Body $body

# Example Response
{
    "testCases": [
        {
            "name": "Divide_ValidInput_ReturnsCorrectResult",
            "code": "public void Divide_ValidInput_ReturnsCorrectResult()\n{\n    var calculator = new Calculator();\n    var result = calculator.Divide(10, 2);\n    Assert.Equal(5, result);\n}",
            "description": "Tests division with valid positive integers"
        },
        {
            "name": "Divide_DivideByZero_ThrowsException",
            "code": "public void Divide_DivideByZero_ThrowsException()\n{\n    var calculator = new Calculator();\n    Assert.Throws<DivideByZeroException>(() => calculator.Divide(10, 0));\n}",
            "description": "Tests division by zero scenario"
        }
    ]
}
```

## Configuration

### appsettings.json
```json
{
  "AI": {
    "BaseUrl": "https://api.openai.com/v1",
    "ApiKey": "your-api-key-here",
    "Model": "gpt-4-turbo-preview",
    "MaxTokens": 2000,
    "Temperature": 0.3
  },
  "CodeBase": {
    "BasePath": "C:\\QAInsight\\Repositories",
    "MaxFileSize": 10485760,
    "AllowedExtensions": [".cs", ".fs", ".vb", ".ts", ".js", ".py", ".java", ".cpp", ".h"]
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
```

## Authentication
- API key authentication required for all API endpoints
- Key should be provided in X-API-Key header
- UI access does not require authentication by default

## Getting Started

1. Prerequisites:
   - .NET 8 SDK
   - SQL Server (optional, for persistence)
   - Git (for repository analysis)

2. Installation:
   ```bash
   git clone https://github.com/your-org/QAInsight.git
   cd QAInsight
   dotnet restore
   dotnet build
   ```

3. Configuration:
   - Copy appsettings.json.template to appsettings.json
   - Configure your AI provider settings
   - Set up your API key
   - Configure repository paths

4. Running:
   ```bash
   cd QAInsight.Web
   dotnet run
   ```

5. Access:
   - Web UI: https://localhost:5001
   - Swagger API docs: https://localhost:5001/swagger
   - Health check: https://localhost:5001/health

## Features

### Code Analysis
- Detects code smells and anti-patterns
- Calculates complexity metrics
- Identifies potential improvements
- Supports multiple programming languages

### AI Assistant
- Answers code-related questions
- Provides context-aware suggestions
- Improves prompts based on feedback
- Generates code explanations

### Refactoring
- Suggests code improvements
- Provides refactoring examples
- Calculates impact and effort
- Supports automated refactoring

### Test Generation
- Creates unit test templates
- Generates test cases
- Supports multiple test frameworks
- Includes mock object generation

### Documentation
- Generates code documentation
- Supports multiple formats
- Creates usage examples
- Maintains documentation coverage

## Plugin System

### Creating a Plugin
1. Create a new class library project
2. Implement IPlugin interface
3. Implement specific plugin interfaces
4. Add plugin metadata
5. Build and deploy to plugins directory

### Plugin Types
- Code Analysis Plugins
- Refactoring Plugins
- Documentation Plugins
- Test Generation Plugins

## Best Practices

### Code Analysis
- Regular repository scans
- Focus on high-impact issues
- Use appropriate confidence thresholds
- Review AI suggestions

### AI Integration
- Provide clear context
- Use focused questions
- Review and validate suggestions
- Maintain prompt templates

### Security
- Secure API keys
- Validate input
- Monitor access
- Regular updates

## Troubleshooting

### Common Issues
1. API Key Issues
   - Verify key in configuration
   - Check key validity
   - Ensure proper header

2. Analysis Failures
   - Check file permissions
   - Verify file size limits
   - Review language support

3. Performance Issues
   - Monitor resource usage
   - Check concurrent requests
   - Review cache settings

### Logging
- Log files location: logs/qainsight-.log
- Structured logging with Serilog
- Application Insights integration
- SEQ dashboard support

## Support and Contributing

### Getting Help
- GitHub Issues
- Documentation Wiki
- Community Forums
- Email Support

### Contributing
- Fork repository
- Create feature branch
- Add tests
- Submit pull request

## License
MIT License - See LICENSE file for details 